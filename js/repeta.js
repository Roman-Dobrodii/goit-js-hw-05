/*
 * –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (callback)
 * - –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * - –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å
 *   ¬´—Ñ—É–Ω–∫—Ü–∏–µ–π –æ–±—Ä–∞—Ç–Ω–æ–≥–æ (–æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ) –≤—ã–∑–æ–≤–∞¬ª (callback-—Ñ—É–Ω–∫—Ü–∏—è)
 * - –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
 *   –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´—Ñ—É–Ω–∫—Ü–∏–µ–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞¬ª
 */

// const fnA = function (message, callback) {
//     console.log(message);

//     console.log(callback);
//     callback(100);
// };

// const fnB = function (number) {
//     console.log('–≠—Ç–æ –ª–æ–≥ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ fnB', number);
// };

// fnA('qweqwe', fnB);

/*
 * —Ñ—É–Ω–∫—Ü–∏—è doMath(a, b, callback)
 */

const doMath = function (a, b, callback) {
  const result = callback(a, b);

  console.log(result);
};

// doMath(2, 3, function (x, y) {
//     return x + y;
// });

// doMath(10, 8, function (x, y) {
//     return x - y;
// });

/*
 * –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
 */

const buttonRef = document.querySelector('.js-button');

const handleBtnClick = function () {
  console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ' + Date.now());
};

// buttonRef.addEventListener('click', handleBtnClick);

/*
 * –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
 */

const onGetPositionSuccess = function (position) {
  console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ onGetPositionSuccess');
  console.log(position);
};

const onGetPositionError = function (error) {
  console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ onGetPositionError');
  console.log(error);
};

// window.navigator.geolocation.getCurrentPosition(
//     onGetPositionSuccess,
//     onGetPositionError,
// );

/*
 * –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
 */

const callback = function () {
  console.log('–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–±–µ–∫–∞ –≤ —Ç–∞–π–º–∞—É—Ç–µ');
};

// console.log('–í –∫–æ–¥–µ –ø–µ—Ä–µ–¥ —Ç–∞–π–º–∞—É—Ç–æ–º');
// setTimeout(callback, 2000);
// console.log('–í –∫–æ–¥–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞');

/*
 * –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: http-–∑–∞–ø—Ä–æ—Å
 * - API URL: https://pokeapi.co/api/v2/pokemon
 */

const onRequestSuccess = function (response) {
  console.log('–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ onRequestSuccess –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–µ–∫–µ–Ω–¥–∞');
  console.log(response);
};

// fetch('https://pokeapi.co/api/v2/pokemon')
//     .then(res => res.json())
//     .then(onRequestSuccess);

/*
 * –§–∏–ª—å—Ç—Ä
 */

const filter = function (array, test) {
  const filteredArray = [];

  for (const el of array) {
    console.log(el);
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }

  return filteredArray;
};

// 1. –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
// 2. —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
// 3. –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç true
// 3. –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –ù–ï —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç false

const callback1 = function (value) {
  return value >= 3;
};

const r1 = filter([1, 2, 3, 4, 5], callback1);
console.log(r1);

const callback2 = function (value) {
  return value <= 4;
};

const r2 = filter([1, 2, 3, 4, 5, 6, 7, 8], callback2);
console.log(r2);

const fruits = [
  { name: 'apples', quantity: 200, isFresh: true },
  { name: 'grapes', quantity: 150, isFresh: false },
  { name: 'bananas', quantity: 100, isFresh: true },
];

const getFruitsWithQuantity = function (fruit) {
  return fruit.quantity >= 120;
};

const r3 = filter(fruits, getFruitsWithQuantity);
console.log(r3);

/*
 * –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é.
 *
 * –í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
 * –∫–æ –≤—Å–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º (–æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏)
 * —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–π –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –µ—ë –≤–µ—Ä–Ω—É–ª–∏),
 * —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´–∑–∞–º—ã–∫–∞–Ω–∏–µ¬ª.
 */

const fnA = function (parameter) {
  const innerVariable = '–∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ fnA';

  const innerFunction = function () {
    console.log(parameter);
    console.log(innerVariable);
    console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ innerFunction');
  };

  return innerFunction;
};

// const fnB = fnA(555);

// fnB();

// console.log(fnB);

/*
 * –ü–æ–≤–∞—Ä—ë–Ω–æ–∫
 */
// const makeDish = function (sheffName, dish) {
//     console.log(`${sheffName} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);
// };

// makeDish('Mango', '–ø–∏—Ä–æ–∂–æ–∫');
// makeDish('Mango', '–æ–º–ª–µ—Ç');
// makeDish('Mango', '—á–∞–π');

// makeDish('Poly', '–∫–æ—Ç–ª–µ—Ç—ã');
// makeDish('Poly', '—Å—É–ø–∏–∫');
// makeDish('Poly', '–∫–æ—Ñ–µ');

const makeSheff = function (name) {
  const innverVar = 555;
  const message = 'hello';

  const makeDish = function (dish) {
    console.log(message);
    console.log(innverVar);
    console.log(`${name} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);
  };

  return makeDish;
};

// const mango = makeSheff('Mango');

// console.dir(mango);

// mango('–∫–æ—Ç–ª–µ—Ç—ã');
// mango('–ø–∏—Ä–æ–∂–æ–∫');

// const poly = makeSheff('Poly');

// console.dir(poly);

// poly('—á–∞–π');
// poly('–æ–º–ª–µ—Ç');

// console.dir(mango);

/*
 * –û–∫—Ä—É–≥–ª—è—Ç–æ—Ä ü§∑‚Äç‚ôÇÔ∏è
 */

// const floatingPoint = 3.456789;
// const someInt = Math.round(floatingPoint); // 3
// const withDecimals = Number(floatingPoint.toFixed(2)); // 3.46

// const rounder = function (number, places) {
//     return Number(number.toFixed(places));
// };

// console.log(rounder(3.4567, 2));
// console.log(rounder(3.4567, 3));
// console.log(rounder(5.1234, 2));
// console.log(rounder(3.4567, 3));

const rounder = function (places) {
  return function (number) {
    return Number(number.toFixed(places));
  };
};

// const rounder2 = rounder(2);
// const rounder3 = rounder(3);

// console.dir(rounder2);
// console.dir(rounder3);

// console.log(rounder2(3.4567));
// console.log(rounder2(5.4512312312367));
// console.log(rounder3(3.4567));
// console.log(rounder2(5.1234));
// console.log(rounder3(3.4567));
// console.log(rounder3(10.67667));

/*
 * –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */

const salaryManagerFactory = function (employeeName, baseSalary = 0) {
  let salary = baseSalary;

  return {
    raise(amount) {
      if (amount > 1000) {
        return '–¢—ã –æ—Ñ–∏–≥–µ–ª?';
      }

      salary += amount;
    },
    lower(amount) {
      salary -= amount;
    },
    current() {
      return `–¢–µ–∫—É—â–∞—è –∑–∞—Ä–ø–∞–ª–∞—Ç–∞ ${employeeName} - ${salary}`;
    },
  };
};

const salaryManager = salaryManagerFactory('Mango', 5000);

console.log(salaryManager.current());

console.log(salaryManager.raise(10000000));

console.log(salaryManager.current());

// const myLibFactory = function () {
//     let value = 0;

//     const add = function (num) {
//         value += num;
//     };

//     return {
//         add: add,
//         getValue() {
//             return value;
//         },
//     };
// };

// const myLib = myLibFactory();

// console.dir(myLib.getValue);

// console.log(myLib);
// console.log(myLib.getValue());
// myLib.add(10);
// console.log(myLib.getValue());

/*
 * –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 * - –û–±—ä—è–≤–ª–µ–Ω–∏–µ
 * - –Ø–≤–Ω—ã–π –∏ –Ω–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
 * - –ê—Ä–≥—É–º–µ–Ω—Ç—ã
 * - –ù–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞
 */

// const add = function (a, b, c) {
//     console.log(arguments);
//     return a + b + c;
// };

// const addArrow = (a, b, c) => {
//     return a + b + c;
// };

// console.log(add(5, 10, 15));
// console.log(addArrow(5, 10, 15));

// const fnA = function () {
//   return {
//     a: 5,
//   };
// };

// console.log(fnA());

// const arrowFnA = () => ({ arrowA: 5 });

// console.log(arrowFnA());

const filter = (array, test) => {
  const filteredArray = [];

  for (const el of array) {
    console.log(el);
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }

  return filteredArray;
};

// const callback1 = value => value >= 3;

const r1 = filter([1, 2, 3, 4, 5], value => value >= 3);

console.log(r1);

// const callback2 = value => value <= 4;

const r2 = filter([1, 2, 3, 4, 5, 6, 7, 8], value => value <= 4);
console.log(r2);

const fruits = [
  { name: 'apples', quantity: 200, isFresh: true },
  { name: 'grapes', quantity: 150, isFresh: false },
  { name: 'bananas', quantity: 100, isFresh: true },
];

// const getFruitsWithQuantity = fruit => fruit.quantity >= 120;

const r3 = filter(fruits, fruit => fruit.quantity >= 120);
console.log(r3);

/*
 * –§—É–Ω–∫—Ü–∏—è —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π –æ–±—ä–µ–∫—Ç–∞ -> –°–°–´–õ–û–ß–ù–´–ô –¢–ò–ü
 */

// console.log('[] === []: ', [] === []);
// console.log('{} === {}: ', {} === {});
// console.log(
//     'function() {} === function() {}: ',
//     function () {} === function () {},
// );

// const fnA = function () {
//     console.log('hello');
// };

// const fnB = fnA;
// console.log('fnB === fnA: ', fnB === fnA);

/*
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç (this)
 *    - –ì–¥–µ –∏ –∫–∞–∫ –±—ã–ª–∞ –æ–±—ä—è–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ò–ú–ï–ï–¢ –ù–ò–ö–ê–ö–û–ì–û –í–õ–ò–Ø–ù–ò–Ø –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
 *    - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –í –ú–û–ú–ï–ù–¢ –í–´–ó–û–í–ê –§–£–ù–ö–¶–ò–ò, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω —è–≤–Ω–æ.
 */

/*
 * –ö–∞–∫ –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—ä–µ–∫—Ç–∞.
 */

// const user = {
//     tag: 'Mango',
//     showTag() {
//         console.log('showTag -> this', this);
//     },
// };

// user.showTag();

/*
 * –í—ã–∑–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * - –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ = undefined
 * - –ù–µ –≤ —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ = window
 */

// const foo = function () {
//     console.log('foo -> this', this);
// };

// foo();

/*
 * –ö–∞–∫ –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞, –Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∞ –∫–∞–∫ –≤–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è.
 * –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—ä–µ–∫—Ç–∞.
 */

// const showTag = function () {
//     console.log('showTag -> this', this);
//     console.log('showTag -> this.tag', this.tag);
// };

// showTag();

// const user = {
//     tag: 'Mango',
// };

// user.showUserTag = showTag;
// console.log('user', user);

// user.showUserTag();

/*
 * –í—ã–∑–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∞ –∫–∞–∫ –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞.
 */

// const user = {
//     tag: 'Mango',
//     showTag() {
//         console.log('showTag -> this', this);
//         console.log('showTag -> this.tag', this.tag);
//     },
// };

// user.showTag();

// const outerShowTag = user.showTag;

// outerShowTag();

/*
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤ callback-—Ñ—É–Ω–∫—Ü–∏—è—Ö
 */

// const user = {
//     tag: 'Mango',
//     showTag() {
//         console.log('showTag -> this', this);
//         console.log('showTag -> this.tag', this.tag);
//     },
// };

// const invokeAction = function (action) {
//     console.log(action);

//     action();
// };

// invokeAction(user.showTag);

/*
 * –¢—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è 1
 */

// const fn = function () {
//     console.log('fn -> this', this);
// };

// fn(); // –ö–∞–∫–æ–π this ???

/*
 * –¢—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è 2
 */

// const book = {
//     title: 'React for beginners',
//     showThis() {
//         console.log('showThis -> this', this);
//     },
//     showTitle() {
//         console.log('showTitle -> this.title', this.title);
//     },
// };

// book.showThis(); // –ö–∞–∫–æ–π this ???

// const outerShowThis = book.showThis;
// outerShowThis(); // –ö–∞–∫–æ–π this ???

// const outerShowTitle = book.showTitle;
// outerShowTitle(); // –ö–∞–∫–æ–π this ???

/*
 * –¢—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è 3
 */

// const makeChangeColor = function () {
//     const changeColor = function (color) {
//         console.log('changeColor -> this', this);
//         // this.color = color;
//     };

//     // changeColor(); // –ö–∞–∫–æ–π this ???

//     const sweater = {
//         color: 'teal',
//     };

//     sweater.updateColor = changeColor;

//     // sweater.updateColor('red'); // –ö–∞–∫–æ–π this ???

//     return sweater.updateColor;
// };

// const swapColor = makeChangeColor();

// swapColor('blue'); // –ö–∞–∫–æ–π this ???

/*
 * –¢—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è 4
 */

// const makeChangeColor = function () {
//     const changeColor = function (color) {
//         console.log('changeColor -> this', this);
//     };

//     return changeColor;
// };

// const updateColor = makeChangeColor();
// updateColor('yellow'); // –ö–∞–∫–æ–π this ???

// const hat = {
//     color: 'blue',
//     updateColor: updateColor,
// };

// hat.updateColor('orange'); // –ö–∞–∫–æ–π this ???

/*
 * –¢—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è 5
 */

const counter = {
  value: 0,
  increment(value) {
    console.log('increment -> this', this);
    this.value += value;
  },
  decrement(value) {
    console.log('decrement -> this', this);
    this.value -= value;
  },
};

const updateCounter = function (value, operation) {
  operation(value);
};

updateCounter(10, counter.increment);
updateCounter(5, counter.decrement);

/*
 * call –∏ apply
 */
// const showThis = function (a, b, arr) {
//     console.log(a, b, arr);
//     console.log('showThis -> this', this);
// };

// showThis();

// const objA = {
//     a: 5,
//     b: 10,
// };

// showThis.call(objA, 5, 1, [100, 200, 300]);
// showThis.apply(objA, [5, 1, [100, 200, 300]]);

// const objB = {
//     x: 788,
//     y: 25,
// };

// showThis.call(objB, 1, 1, 2);
// showThis.apply(objB, [1, 1, 2]);

// showThis();

const changeColor = function (color) {
  console.log('changeColor -> this', this);
  this.color = color;
};

const hat = {
  color: 'black',
};

// changeColor.call(hat, 'orange');
// console.log(hat);

const sweater = {
  color: 'green',
};

// changeColor.call(sweater, 'blue');
// console.log(sweater);

/*
 * bind
 */

const changeHatColor = changeColor.bind(hat);
const changeSweaterColor = changeColor.bind(sweater);

// changeHatColor('yellow');
// console.log(hat);

// changeSweaterColor('red');
// console.log(sweater);

/*
 * counter
 */

const counter = {
  value: 0,
  increment(value) {
    console.log('increment -> this', this);
    this.value += value;
  },
  decrement(value) {
    console.log('decrement -> this', this);
    this.value -= value;
  },
};

const updateCounter = function (value, operation) {
  operation(value);
};

// updateCounter(10, counter.increment.bind(counter));
// updateCounter(5, counter.decrement.bind(counter));

// console.log(counter);

const counter = {
  value: 0,
  increment() {
    console.log('increment -> this', this);
    this.value += 1;
  },
  decrement() {
    console.log('decrement -> this', this);
    this.value -= 1;
  },
};

const decrementBtn = document.querySelector('.js-decrement');
const incrementBtn = document.querySelector('.js-increment');
const valueEl = document.querySelector('.js-value');

decrementBtn.addEventListener('click', function () {
  console.log('–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç');

  counter.decrement();
  console.log(counter);
  valueEl.textContent = counter.value;
});

incrementBtn.addEventListener('click', function () {
  console.log('–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç');

  counter.increment();
  console.log(counter);
  valueEl.textContent = counter.value;
});

console.log(window);
